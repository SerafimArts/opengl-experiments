#!/usr/bin/env php
<?php

/**
 * This file is part of Cube package.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

use App\Util\Shader\Fragment;
use App\Util\Shader\Vertex;
use App\Util\ShaderProgram;
use App\Library\GL;
use App\Library\GLFW3;
use FFI\Proxy\Registry;
use FFI\Scalar\Type;
use Symfony\Component\Console\Output\ConsoleOutput;

require __DIR__ . '/app/bootstrap.php';

$app = new \App\Application();

// build and compile our shader program
// ------------------------------------
$shader = new ShaderProgram([
    Vertex::fromPathname(__DIR__ . '/resources/shaders/vertex.vert'),
    Fragment::fromPathname(__DIR__ . '/resources/shaders/fragment.frag'),
]);

// set up vertex data (and buffer(s)) and configure vertex attributes
// ------------------------------------------------------------------
$vertices = Type::floatArray([
     0.5,  0.5, 0.0,  // top right
     0.5, -0.5, 0.0,  // bottom right
    -0.5, -0.5, 0.0,  // bottom left
    -0.5,  0.5, 0.0,  // top left
]);

$indices = Type::uint32Array([  // note that we start from 0!
    0, 1, 3,  // first Triangle
    1, 2, 3,  // second Triangle
]);

[$vbo, $vao, $ebo] = [Type::uint32(), Type::uint32(), Type::uint32()];
$app->gl->glGenVertexArrays(1, FFI::addr($vao));
$app->gl->glGenBuffers(1, FFI::addr($vbo));
$app->gl->glGenBuffers(1, FFI::addr($ebo));
// bind the Vertex Array Object first, then bind and set vertex buffer(s), and
// then configure vertex attributes(s).
$app->gl->glBindVertexArray($vao->cdata);

$app->gl->glBindBuffer(GL::ARRAY_BUFFER, $vbo->cdata);
$app->gl->glBufferData(GL::ARRAY_BUFFER, FFI::sizeof($vertices), $vertices, GL::STATIC_DRAW);

$app->gl->glBindBuffer(GL::ELEMENT_ARRAY_BUFFER, $ebo->cdata);
$app->gl->glBufferData(GL::ELEMENT_ARRAY_BUFFER, FFI::sizeof($indices), $indices, GL::STATIC_DRAW);

$app->gl->glVertexAttribPointer(0, 3, GL::FLOAT, GL::FALSE, 3 * FFI::sizeof(FFI::type('float')), null);
$app->gl->glEnableVertexAttribArray(0);

// note that this is allowed, the call to glVertexAttribPointer registered VBO
// as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind
$app->gl->glBindBuffer(GL::ARRAY_BUFFER, 0);

// remember: do NOT unbind the EBO while a VAO is active as the bound element
// buffer object IS stored in the VAO; keep the EBO bound.
//glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);

// You can unbind the VAO afterwards so other VAO calls won't accidentally modify
// this VAO, but this rarely happens. Modifying other
// VAOs requires a call to glBindVertexArray anyways so we generally don't unbind
// VAOs (nor VBOs) when it's not directly necessary.
$app->gl->glBindVertexArray(0);

$app->gl->glPolygonMode(GL::FRONT_AND_BACK, GL::LINE);

while (!$app->glfw->glfwWindowShouldClose($app->window)) {
    if ($delta = $app->fps->shouldUpdate(.3)) {
        $app->glfw->glfwSetWindowTitle($app->window, 'FPS ' . (int)(1 / $delta));
    }

    // input
    // -----
    if ($app->glfw->glfwGetKey($app->window, GLFW3::KEY_ESCAPE) === GLFW3::PRESS) {
        $app->glfw->glfwSetWindowShouldClose($app->window, 1);
    }

    // render
    // ------
    $app->gl->glClearColor(0.2, 0.3, 0.3, 1.0);
    $app->gl->glClear(GL::COLOR_BUFFER_BIT);

    // draw our first triangle
    $shader->use();
    $app->gl->glBindVertexArray($vao->cdata); // seeing as we only have a single VAO
                                              // there's no need to bind it every time,
                                              // but we'll do so to keep things a bit
                                              // more organized
    // glDrawArrays(GL_TRIANGLES, 0, 6);
    $app->gl->glDrawElements(GL::TRIANGLES, 6, GL::UNSIGNED_INT, null);
    // glBindVertexArray(0); // no need to unbind it every time

    // glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)
    // -------------------------------------------------------------------------------
    $app->glfw->glfwSwapBuffers($app->window);
    $app->glfw->glfwPollEvents();
}

// optional: de-allocate all resources once they've outlived their purpose:
// ------------------------------------------------------------------------
$app->gl->glDeleteVertexArrays(1, FFI::addr($vao));
$app->gl->glDeleteBuffers(1, FFI::addr($vbo));
$app->gl->glDeleteBuffers(1, FFI::addr($ebo));

// glfw: terminate, clearing all previously allocated GLFW resources.
// ------------------------------------------------------------------
$app->glfw->glfwTerminate();
